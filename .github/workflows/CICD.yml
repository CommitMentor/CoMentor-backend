name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Decode and verify
      run: |
        echo "Decoding application-secret.yml"
        echo "${{ secrets.SECRET_YML }}" | base64 -d > ./src/main/resources/application-secret.yml

    - name: Build with Gradle
      run: |
          chmod 777 ./gradlew
          ./gradlew clean assemble -x test

    - name: Login to DockerHub
      if: github.event_name == 'push'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker Image
      if: github.event_name == 'push'
      run: |
        docker build --platform linux/amd64 \
          --build-arg FIREBASE_CREDENTIAL_BASE64="${{ secrets.FIREBASE_CREDENTIAL_BASE64 }}" \
          --build-arg PROFILES=prod \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest .

    - name: Push Docker Image to Docker Hub
      if: github.event_name == 'push'
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest

    - name: Who am I & repo exists?
      if: github.event_name == 'push'
      env:
        NS:   ${{ secrets.DOCKERHUB_NAMESPACE }}
        REPO: ${{ secrets.DOCKERHUB_REPO }}
        U:    ${{ secrets.DOCKERHUB_USERNAME }}
        T:    ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        echo "== docker info username =="
        docker info | grep -i 'Username' || true
        echo "== push target = docker.io/${NS}/${REPO}:latest =="

        echo "== check repo exists on Docker Hub =="
        curl -fsSL -u "${U}:${T}" "https://hub.docker.com/v2/repositories/${NS}/${REPO}/" >/dev/null \
          && echo "Repo exists ✅" \
          || (echo "Repo missing or no access ❌ (네임스페이스/권한/오타 확인)"; exit 1)

      
  deploy:
    needs: build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^main-server"; then
              sudo docker stop main-server
              sudo docker rm main-server
            else
              echo "Container main-server does not exist. Skipping stop and remove."
            fi

      - name: Pull and Deploy Docker Image
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" > .env
            sudo docker-compose --env-file .env -f docker-compose.yml up -d

      
      
      - name: Delete Old Docker Image
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            dangling_images=$(sudo docker images -f "dangling=true" -q)
            if [ ! -z "$dangling_images" ]; then
              sudo docker rmi $dangling_images
            else
              echo "No dangling images found"
            fi
